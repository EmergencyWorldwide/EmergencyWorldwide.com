<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Emergency Worldwide</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #121212;
            color: #fff;
            padding: 20px;
            display: flex;
            flex-direction: column;
        }
        .container {
            display: flex;
            flex-direction: column;
        }
        .menu {
            margin-bottom: 20px;
        }
        .menu button {
            background-color: #007bff;
            color: white;
            padding: 10px 15px;
            border: none;
            cursor: pointer;
            margin: 5px;
        }
        .menu button:hover {
            background-color: #0056b3;
        }
        #map {
            height: 400px;
            width: 100%;
            border-radius: 10px;
            margin-bottom: 15px;
        }
        .details-container {
            padding: 20px;
        }
        .details-container h2 {
            margin-bottom: 20px;
        }
        .details-container p {
            margin-bottom: 10px;
        }
        .back-btn {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
        }
        .back-btn:hover {
            background-color: #218838;
        }
        .loading {
            font-size: 18px;
            color: #ff9800;
        }
        .refund-btn {
            background-color: #f44336;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
        }
        .refund-btn:hover {
            background-color: #d32f2f;
        }
    </style>
</head>
<body>

<div class="container">
    <div class="menu">
        <button onclick="showMainPage()">üè† Main Page</button>
        <button onclick="showRefundPage()">üí∞ Refund System</button>
        <button onclick="showViewDetailsPage()">üîç View Details</button>
    </div>

    <!-- Main Page -->
    <div id="main-page">
        <h1>üö® Emergency Worldwide</h1>
        <div id="map"></div>
        <button onclick="startPlacing('Fire Station')">üî• Place Fire Station</button>
        <button onclick="startPlacing('Fire Engine')">üöí Place Fire Engine</button>
        <button onclick="startPlacing('DMO Shed')">üîß Place DMO Shed</button>
    </div>

    <!-- Refund Page -->
    <div id="refund-page" style="display: none;">
        <div class="details-container">
            <h2>üí∞ Refund System</h2>
            <h3>Buildings</h3>
            <div id="refund-building-list" class="loading">Loading buildings...</div>
            <h3>Vehicles</h3>
            <div id="refund-vehicle-list" class="loading">Loading vehicles...</div>
            <button class="back-btn" onclick="showMainPage()">Back to Main</button>
        </div>
    </div>

    <!-- View Details Page -->
    <div id="view-details-page" style="display: none;">
        <div class="details-container">
            <h2>üìü View Details</h2>
            <h3>Buildings</h3>
            <div id="building-list" class="loading">Loading buildings...</div>
            <h3>Vehicles</h3>
            <div id="vehicle-list" class="loading">Loading vehicles...</div>
            <h3>Missions</h3>
            <div id="mission-list" class="loading">Loading missions...</div>
            <button class="back-btn" onclick="showMainPage()">Back to Main</button>
        </div>
    </div>
</div>

<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script>
    let map = L.map('map').setView([-37.8136, 144.9631], 12);  
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);

    let balance = 1000000;
    let buildings = [];
    let vehicles = [];
    let missions = [];
    let markers = [];
    let placingType = null;

    // Start placing a building or vehicle
    function startPlacing(type) {
        placingType = type;
        alert(`Click on the map to place a ${type}.`);
    }

    // Handle map click to place markers
    map.on('click', function(event) {
        if (!placingType) return;

        let latlng = event.latlng;
        let newMarker = L.marker(latlng).addTo(map)
            .bindPopup(`${placingType} - Click to view details`)
            .on('click', function() {
                viewBuildingDetails(this);
            });

        let markerData = {
            type: placingType,
            location: latlng,
            name: `${placingType} at ${latlng.lat.toFixed(3)}, ${latlng.lng.toFixed(3)}`
        };

        markers.push({ marker: newMarker, data: markerData });

        if (placingType === "Fire Engine") {
            vehicles.push(markerData);
        } else {
            buildings.push(markerData);
        }

        placingType = null;
        saveProgress();
    });

    // View building details on click
    function viewBuildingDetails(marker) {
        let markerData = markers.find(m => m.marker === marker);
        if (!markerData) return;

        let building = markerData.data;
        let vehicleList = vehicles.filter(v => v.location.lat === building.location.lat && v.location.lng === building.location.lng);

        let details = `
            <h3>${building.name} - Details</h3>
            <p>üìç Location: ${building.location.lat.toFixed(3)}, ${building.location.lng.toFixed(3)}</p>
            <h4>Assigned Vehicles:</h4>
            <ul>
                ${vehicleList.map(vehicle => `<li>${vehicle.name}</li>`).join('')}
            </ul>
            <button onclick="refundBuilding('${building.name}')">Sell for 20% Refund</button>
        `;
        document.getElementById('building-list').innerHTML = details; // Display details in the view
    }

    // Refund system: 20% refund when selling a building or vehicle
    function refundBuilding(buildingName) {
        let buildingIndex = buildings.findIndex(b => b.name === buildingName);
        let vehicleIndex = vehicles.findIndex(v => v.name === buildingName);

        if (buildingIndex !== -1) {
            let building = buildings[buildingIndex];
            let refundAmount = calculateRefund(building.type);
            buildings.splice(buildingIndex, 1);
            removeMarker(buildingName);  // Remove marker after refund
            alert(`You sold the ${building.name} for a refund of $${refundAmount.toFixed(2)}.`);
            balance += refundAmount;
        } else if (vehicleIndex !== -1) {
            let vehicle = vehicles[vehicleIndex];
            let refundAmount = calculateRefund(vehicle.type);
            vehicles.splice(vehicleIndex, 1);
            removeMarker(vehicle.name);  // Remove marker after refund
            alert(`You sold the ${vehicle.name} for a refund of $${refundAmount.toFixed(2)}.`);
            balance += refundAmount;
        }
        saveProgress();
        updateRefundPage();
    }

    // Remove marker from the map
    function removeMarker(name) {
        let markerToRemove = markers.find(m => m.data.name === name);
        if (markerToRemove) {
            map.removeLayer(markerToRemove.marker); // Remove marker from map
            markers = markers.filter(m => m !== markerToRemove); // Remove marker from markers array
        }
    }

    // Calculate 20% refund
    function calculateRefund(type) {
        let price = 0;
        if (type === 'Fire Engine') {
            price = 300000;
        } else if (type === 'Fire Station') {
            price = 500000;
        } else if (type === 'DMO Shed') {
            price = 100000;
        }
        return price * 0.20;
    }

    // Show the main page
    function showMainPage() {
        document.getElementById("main-page").style.display = "block";
        document.getElementById("view-details-page").style.display = "none";
        document.getElementById("refund-page").style.display = "none";
    }

    // Show the view details page
    function showViewDetailsPage() {
        document.getElementById("main-page").style.display = "none";
        document.getElementById("view-details-page").style.display = "block";
        document.getElementById("refund-page").style.display = "none";
        updateDetailsPage();
    }

    // Show the refund system page
    function showRefundPage() {
        document.getElementById("main-page").style.display = "none";
        document.getElementById("view-details-page").style.display = "none";
        document.getElementById("refund-page").style.display = "block";
        updateRefundPage();
    }

    // Update the refund page with buildings and vehicles
    function updateRefundPage() {
        const buildingListContainer = document.getElementById('refund-building-list');
        const vehicleListContainer = document.getElementById('refund-vehicle-list');

        buildingListContainer.innerHTML = buildings.length > 0 ? 
            buildings.map(b => `<p>${b.name} - Location: ${b.location.lat.toFixed(3)}, ${b.location.lng.toFixed(3)} 
                <button class="refund-btn" onclick="refundBuilding('${b.name}')">Refund</button></p>`).join('') :
            'No buildings placed for refund';

        vehicleListContainer.innerHTML = vehicles.length > 0 ? 
            vehicles.map(v => `<p>${v.name} - Location: ${v.location.lat.toFixed(3)}, ${v.location.lng.toFixed(3)} 
                <button class="refund-btn" onclick="refundBuilding('${v.name}')">Refund</button></p>`).join('') :
            'No vehicles placed for refund';
    }

    // Save progress to localStorage
    function saveProgress() {
        localStorage.setItem('buildings', JSON.stringify(buildings));
        localStorage.setItem('missions', JSON.stringify(missions));
        localStorage.setItem('vehicles', JSON.stringify(vehicles));
        localStorage.setItem('markers', JSON.stringify(markers.map(m => ({
            latlng: m.marker.getLatLng(),
            data: m.data
        }))));
        localStorage.setItem('balance', balance);
    }

    // Load saved progress from localStorage
    function loadProgress() {
        let savedBuildings = JSON.parse(localStorage.getItem('buildings'));
        let savedMissions = JSON.parse(localStorage.getItem('missions'));
        let savedVehicles = JSON.parse(localStorage.getItem('vehicles'));
        let savedMarkers = JSON.parse(localStorage.getItem('markers'));
        let savedBalance = localStorage.getItem('balance');

        if (savedBuildings) buildings = savedBuildings;
        if (savedMissions) missions = savedMissions;
        if (savedVehicles) vehicles = savedVehicles;
        if (savedMarkers) {
            savedMarkers.forEach(markerData => {
                let marker = L.marker(markerData.latlng).addTo(map)
                    .bindPopup(markerData.data.name)
                    .on('click', function() {
                        viewBuildingDetails(this);
                    });
                markers.push({ marker, data: markerData.data });
            });
        }
        if (savedBalance) balance = parseFloat(savedBalance);
    }

    // Call loadProgress on page load
    window.onload = function() {
        loadProgress();
    };
</script>

</body>
</html>
